import org.yaml.snakeyaml.Yaml

buildscript {
	repositories {
		maven { url 'http://repo.spring.io/plugins-release' }
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.17.2")
		classpath("io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE")
		classpath("org.yaml:snakeyaml:1.19")
	}
}

plugins {
	id 'org.springframework.boot' version '2.1.6.RELEASE'
	id 'java'
	id "org.liquibase.gradle" version "2.0.1"
}

apply plugin: "org.springframework.boot"
apply plugin: 'io.spring.dependency-management'

group = 'com.booking.movies'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 11

repositories {
	mavenCentral()
}

dependencies {
	//spring boot
	compile("org.springframework.boot:spring-boot-starter-actuator")
	compile("org.springframework.boot:spring-boot-starter-data-jpa")
	compile("org.springframework.boot:spring-boot-starter-validation")
	compile("org.springframework.boot:spring-boot-starter-web")
	compile('org.springframework.boot:spring-boot-starter-hateoas')
//	implementation 'org.springframework.boot:spring-boot-starter-batch'
/*
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
*/
//	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
/*
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
*/
//	runtimeOnly 'com.h2database:h2'
//	runtimeOnly 'mysql:mysql-connector-java'
//	runtimeOnly 'org.postgresql:postgresql'
//	testImplementation 'org.springframework.boot:spring-boot-starter-test'
//	testImplementation 'org.springframework.batch:spring-batch-test'
//	testImplementation 'org.springframework.security:spring-security-test'

	//security
	compile("org.springframework.security:spring-security-core:${springSecurityVersion}")
	compile("org.springframework.security:spring-security-oauth2-client:${springSecurityVersion}")
	compile("org.springframework.security:spring-security-oauth2-jose:${springSecurityVersion}")
	compile("org.springframework.security.oauth:spring-security-oauth2:2.2.1.RELEASE")
	compile("org.springframework.security:spring-security-jwt:1.0.9.RELEASE")
	
	//swagger
    implementation("io.springfox:springfox-swagger2:${swaggerVersion}")
    implementation("io.springfox:springfox-swagger-ui:${swaggerVersion}")

	//source preprocessing
	compileOnly("org.projectlombok:lombok:${lombokVersion}")
	annotationProcessor("org.projectlombok:lombok:${lombokVersion}")

	//database
	runtime("org.postgresql:postgresql:${postgresqlDriverVersion}")
	implementation("org.liquibase:liquibase-core:${liquibaseVersion}")

	//common utilities
	compile("org.apache.commons:commons-lang3:3.9")
	compile("org.apache.commons:commons-collections4:4.3")
	compile('org.apache.commons:commons-io:1.3.2')

	//liquibase on it's own
	liquibaseRuntime("org.liquibase:liquibase-core:${liquibaseVersion}")
	liquibaseRuntime('org.liquibase:liquibase-groovy-dsl:2.0.2')
	liquibaseRuntime("org.postgresql:postgresql:${postgresqlDriverVersion}")
	liquibaseRuntime("ch.qos.logback:logback-core:1.2.3")
	liquibaseRuntime("ch.qos.logback:logback-classic:1.2.3")
}

liquibase {
	def application = new Yaml().load(new File("$projectDir/src/main/resources/application.yml").newInputStream())

	def dbUrl = findProperty("liquibaseDbUrl") ?: application.spring.datasource.liquibase.url
	def dbUsername = findProperty("liquibaseDbUsername") ?: application.spring.datasource.liquibase.username
	def dbPassword = findProperty("liquibaseDbPassword") ?: application.spring.datasource.liquibase.password
	def dbSchema = findProperty("liquibaseDbSchema") ?: application.spring.datasource.liquibase.schema

	// We need to put schema to url because liquibase does not apply schema name for native sql
	// related issue: https://liquibase.jira.com/browse/CORE-3382
	def dbUrlWithSchema = "${dbUrl}&currentSchema=${dbSchema}"

	activities {
		main {
			classpath "src/main/resources"
			changeLogFile "db/changelog/db.changelog-master.yaml"
			url dbUrlWithSchema
			username dbUsername
			password dbPassword
		}
	}
}

springBoot {
	buildInfo()
}

bootJar {
	manifest {
		attributes "Implementation-Version": version
	}
}
